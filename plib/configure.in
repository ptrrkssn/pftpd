dnl Process this file with autoconf to produce a configure script.

AC_INIT(Plib, 1.0, pen@lysator.liu.se, plib)
AC_PREREQ(2.57)
AC_CONFIG_SRCDIR(plib.h)
AC_CONFIG_AUX_DIR(aux)
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([plib-config], [chmod +x plib-config])
AC_CONFIG_HEADERS([config.h])

			       
AC_PREFIX_DEFAULT(/usr/local)

dnl Try to locate a usable type definition
AC_DEFUN(AC_CHECK_TYPE2, [
AC_CHECK_TYPE($2, $4)
if test $ac_cv_type_$2 = yes; then
	AC_DEFINE($1, $2)
else
	AC_CHECK_TYPE($3, $4)
	if test $ac_cv_type_$3 = yes; then
		AC_DEFINE($1, $3)
	else
		AC_DEFINE($1, $4)
	fi
fi
])

dnl Try to detect support of IPv6 (AF_INET6/struck sockaddr_in6)
AC_DEFUN(AC_CHECK_HAVE_IPV6, [
AC_CACHE_CHECK([for IPv6 support], ac_cv_have_ipv6, [
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
],[
   struct sockaddr_in6 s6;
   memset(&s6, 0, sizeof(s6));
],
ac_cv_have_ipv6=yes, ac_cv_have_ipv6=no)])
if test "$ac_cv_have_ipv6" = "yes"; then
	AC_DEFINE(HAVE_IPV6)
fi
])

dnl Try to detect the return type of sprintf()
AC_DEFUN(AC_CHECK_SPRINTF_RETVAL_POINTER, [
AC_CACHE_CHECK([for sprintf() returning 'char *'], ac_cv_sprintf_retval_pointer, [
AC_TRY_COMPILE([
#include <stdio.h>
],[
   char buf[10];
   return *sprintf(buf, "%d", 10);
],
ac_cv_sprintf_retval_pointer=yes, ac_cv_sprintf_retval_pointer=no)])
if test "$ac_cv_sprintf_retval_pointer" = "yes"; then
	AC_DEFINE(SPRINTF_RETVAL_POINTER)
fi
])

dnl Try to detect the type of the third arg to getsockname() et al
AC_DEFUN(AC_TYPE_SOCKLEN_T,
[AC_CACHE_CHECK(for socklen_t in sys/socket.h, ac_cv_type_socklen_t,
[AC_EGREP_HEADER(socklen_t, sys/socket.h,
  ac_cv_type_socklen_t=yes, ac_cv_type_socklen_t=no)])
if test $ac_cv_type_socklen_t = no; then
	AC_MSG_CHECKING(for AIX)
	AC_EGREP_CPP(yes, [
#ifdef _AIX
 yes
#endif
],[
AC_MSG_RESULT(yes)
AC_DEFINE(socklen_t, size_t)
],[
AC_MSG_RESULT(no)
AC_DEFINE(socklen_t, int)
])
fi
])


dnl Try to find out if pthread_mutex_t is defined in <sys/types.h>
AC_DEFUN(AC_TYPE_PTHREAD_MUTEX_T, [
AC_CACHE_CHECK(for pthread_mutex_t in sys/types.h,
	ac_cv_type_pthread_mutex_t, [
AC_EGREP_HEADER(pthread_mutex_t, sys/socket.h,
	ac_cv_type_pthread_mutex_t=yes,
	ac_cv_type_pthread_mutex_t=no)])
if test $ac_cv_type_pthread_mutex_t = yes; then
	AC_DEFINE(HAVE_PTHREAD_MUTEX_T)
fi
])
	

AC_CANONICAL_HOST

AC_ARG_WITH(threads,
[  --with-threads[=ARG]    enable usage of threads [ARG=yes]])

if test "$with_threads" = "" || test "$with_threads" = "auto"; then
	with_threads=yes
elif test "$with_threads" = "solaris"; then
	with_threads=ui
elif test "$with_threads" = "cma"; then
	with_threads=dce
fi


AC_ARG_WITH(getpw_r,
[  --with-getpw_r[=ARG]    enable usage of getpw..._r functions [ARG=yes]])


AC_PROG_CC
if test "$ac_cv_prog_gcc" = "no"; then
	if test "$CFLAGS" = ""; then
		CFLAGS="$CFLAGS -O"
	fi
fi

AC_C_INLINE
AC_C_CONST


AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h sys/filio.h sys/sendfile.h)

AC_TYPE_PTHREAD_MUTEX_T

AC_TYPE_PID_T
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_TYPE_SOCKLEN_T
AC_TYPE_OFF_T

AC_CHECK_TYPE(ssize_t, int)

AC_CHECK_TYPE2(UINT32, uint32_t, u_int32_t, unsigned int)
AC_CHECK_TYPE2(UINT16, uint16_t, u_int16_t, unsigned short)
AC_CHECK_TYPE2(UINT8,  uint8_t,  u_int8_t,  unsigned char)

AC_CHECK_FUNCS(snprintf vsnprintf)
AC_CHECK_SPRINTF_RETVAL_POINTER

AC_CHECK_HAVE_IPV6

AC_CHECK_FUNCS(memcpy uname setsid)
AC_CHECK_FUNCS(random srandom)
AC_CHECK_FUNCS(strerror sigaction)
AC_CHECK_FUNCS(ftruncate pread flock)
AC_CHECK_FUNCS(mmap poll)
AC_CHECK_FUNCS(strlcpy strlcat)
AC_CHECK_FUNCS(strlncpy strlncat)

AC_CHECK_FUNCS(sendfile)
if test "$ac_cv_func_sendfile" = "no"; then
	AC_CHECK_LIB(sendfile, sendfile)
	if test "$ac_cv_lib_sendfile_sendfile" = "yes"; then
		AC_DEFINE(HAVE_SENDFILE, 1)
	fi
fi
	
AC_CHECK_FUNCS(sendfilev)
if test "$ac_cv_func_sendfilev" = "no"; then
	AC_CHECK_LIB(sendfile, sendfilev)
	if test "$ac_cv_lib_sendfile_sendfilev" = "yes"; then
		AC_DEFINE(HAVE_SENDFILEV, 1)
	fi
fi
	
AC_CHECK_FUNCS(socket)
if test "$ac_cv_func_socket" = "no"; then
	AC_CHECK_LIB(socket, socket)
	if test "$ac_cv_lib_socket_socket" = "yes"; then
		AC_DEFINE(HAVE_SOCKET, 1)
	fi
fi

AC_CHECK_FUNCS(gethostbyname)
if test "$ac_cv_func_gethostbyname" = "no"; then
	AC_CHECK_LIB(nsl, gethostbyname)
	if test "$ac_cv_lib_nsl_gethostbyname" = "yes"; then
		AC_DEFINE(HAVE_GETHOSTBYNAME, 1)
	fi
fi

AC_CHECK_FUNCS(inet_pton)
if test "$ac_cv_func_inet_pton" = "no"; then
	AC_CHECK_LIB(nsl, inet_pton)
	if test "$ac_cv_lib_nsl_inet_pton" = "yes"; then
		AC_DEFINE(HAVE_INET_PTON, 1)
	fi
fi

AC_CHECK_FUNCS(inet_ntop)
if test "$ac_cv_func_inet_ntop" = "no"; then
	AC_CHECK_LIB(nsl, inet_ntop)
	if test "$ac_cv_lib_nsl_inet_ntop" = "yes"; then
		AC_DEFINE(HAVE_INET_NTOP, 1)
	fi
fi


have_threads=no
if test "$with_threads" != "no"; then
	AC_CHECK_HEADERS(pthread.h thread.h)

	dnl Check for Posix threads (in various incarnations)...

   	if test "$with_threads" = "yes" || test "$with_threads" = "posix"; then
		AC_CHECK_LIB(pthread, pthread_attr_init)
	fi
	if test "$ac_cv_lib_pthread_pthread_attr_init" = "yes"; then
		have_threads=posix
	else

   	if test "$with_threads" = "yes" || test "$with_threads" = "posix"; then
		AC_CHECK_LIB(pthreads, pthread_attr_init)
	fi
	if test "$ac_cv_lib_pthreads_pthread_attr_init" = "yes"; then
		have_threads=posix
	else

	dnl Check for pthread_attr_init in libc

   	if test "$with_threads" = "yes" || test "$with_threads" = "posix"; then
		AC_CHECK_FUNCS(pthread_attr_init)
	fi
	if test "$ac_cv_func_pthread_attr_init" = "yes"; then
		have_threads=posix
	else
	
	dnl Check for Unix International threads

   	if test "$with_threads" = "yes" || test "$with_threads" = "ui"; then
		AC_CHECK_LIB(thread, thr_create)
	fi
	if test "$ac_cv_lib_thread_thr_create" = "yes"; then
		have_threads=ui
	else


	dnl Check for DCE/CMA threads (an early Posix threads)

   	if test "$with_threads" = "yes" || test "$with_threads" = "dce"; then
		AC_CHECK_LIB(cma, pthread_attr_create,,,$OS_LIBS)
	fi
	if test "$ac_cv_lib_cma_pthread_attr_create" = "yes"; then
		have_threads=dce
	fi
	fi
	fi
	fi
	fi
	
	dnl If that failed - warn the user
	if test "$have_threads" = "no"; then
		AC_MSG_WARN([
*** No usable threads library found. Building without threads support.
])

	else

		case "$host" in
		*-aix4.2* | *-aix4.3*)
			if test "$ac_cv_prog_gcc" = "yes"; then
			  CPPFLAGS="$CPPFLAGS -D_THREAD_SAFE"
			  LDFLAGS="-nostartfiles /usr/lib/crt0_r.o $LDFLAGS"
			  LIBS="$LIBS -L/usr/lib/threads -lpthreads -lc_r /usr/lib/libc.a"
			else
			  CC="cc_r"
			fi
			;;
		*-freebsd2*)
			if test "$ac_cv_prog_gcc" = "yes"; then
				if test "$with_threads" != "no"; then
					CC="$CC -pthread"
				fi
			fi
			;;
		*-freebsd3* | *-freebsd4*)
			if test "$ac_cv_prog_gcc" = "yes"; then
				if test "$with_threads" != "no"; then
					CC="$CC -pthread"
				fi
			fi
			;;
		*-hpux10*)
			CPPFLAGS="$CPPFLAGS -D_REENTRANT"
			;;
		*-osf4* | *-osf5*)
			CPPFLAGS="$CPPFLAGS -D_REENTRANT"
			LIBS="$LIBS -lmach -lexc"
			;;
		*-solaris2.*)
			if test "$have_threads" = "posix"; then
				CPPFLAGS="$CPPFLAGS -D_POSIX_C_SOURCE=199506L -D__EXTENSIONS__"
			else
				CPPFLAGS="$CPPFLAGS -D_REENTRANT"
			fi
			;;
		esac

		AC_DEFINE(HAVE_THREADS,1)
		if test "$with_getpw_r" = "" || test "$with_getpw_r" = "yes"
		then
			AC_CHECK_FUNCS(getpwnam_r getpwuid_r)
		fi
		AC_CHECK_FUNCS(thr_setconcurrency)
		AC_CHECK_FUNCS(pthread_setconcurrency)
	fi
fi


if test "$ac_cv_func_getpwuid_r" != "yes"; then

dnl Check for IRIX -lsun for YP-enabled getpwuid() routines
AC_CHECK_LIB(sun, getpwuid)

else

dnl Find out the calling sequence for the getpw*_r functions

AC_MSG_CHECKING(for Posix-style getpw..._r)
AC_TRY_LINK([
#include <pwd.h>
],[
struct passwd pwb, *pp;
char buf[1024];
int result;

result = getpwuid_r(0, &pwb, buf, sizeof(buf), &pp);
], [
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_POSIX_GETPW,1)
], [
AC_MSG_RESULT(no)


AC_MSG_CHECKING(for UI-style getpw..._r)
AC_TRY_LINK([
#include <pwd.h>
],[
struct passwd pwb;
char buf[1024];

pwb = *getpwuid_r(0, &pwb, buf, sizeof(buf));
], [
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_UI_GETPW,1)
], [
AC_MSG_RESULT(no)


AC_MSG_CHECKING(for DCE-style getpw..._r)
AC_TRY_LINK([
#include <pwd.h>
],[
struct passwd pwb;
char buf[1024];
int result;

result = getpwuid_r(0, &pwb, buf, sizeof(buf));
], [
AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_DCE_GETPW,1)
], [
AC_MSG_RESULT(no)
])])])

fi

AC_MSG_CHECKING(if sys_errlist[] is already defined)
AC_TRY_COMPILE([#include <stdio.h>],
[char *s = sys_errlist[0];],
AC_MSG_RESULT(yes),
[AC_MSG_RESULT(no)
AC_DEFINE(NEED_SYS_ERRLIST)])


export CC CFLAGS LDFLAGS CPPFLAGS LIBS

AC_OUTPUT
